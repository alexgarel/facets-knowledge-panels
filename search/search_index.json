{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"facets-knowledge-panels Providing knowledge panels for a particular Open Food Facts facet (category, brand, etc...) Why facets-knowledge-panels? Provides applications with a set of informative or actionable items which are contextual to a specific facet. The primary goal is to allow high level contributions by users that maybe interested in a particular subset of the database, like a particular food category, a brand, a location etc. We reuse the knowledge panel format, which remove the need for the application to change as the server side code change, or to implement specific business logic. How do I get started? Join us on Slack Developer documentation Project setup Testing Contributing Guidelines API Documentation About Repo Contributors","title":"facets-knowledge-panels"},{"location":"#facets-knowledge-panels","text":"Providing knowledge panels for a particular Open Food Facts facet (category, brand, etc...)","title":"facets-knowledge-panels"},{"location":"#why-facets-knowledge-panels","text":"Provides applications with a set of informative or actionable items which are contextual to a specific facet. The primary goal is to allow high level contributions by users that maybe interested in a particular subset of the database, like a particular food category, a brand, a location etc. We reuse the knowledge panel format, which remove the need for the application to change as the server side code change, or to implement specific business logic.","title":"Why facets-knowledge-panels?"},{"location":"#how-do-i-get-started","text":"Join us on Slack Developer documentation Project setup Testing Contributing Guidelines API Documentation","title":"How do I get started?"},{"location":"#about-repo","text":"","title":"About Repo"},{"location":"#contributors","text":"","title":"Contributors"},{"location":"how-to-guides/CONTRIBUTING/","text":"Contributing to Facets Knowledge Panels First off, thanks for taking the time to contribute! \ud83c\udf89\ud83c\udf89 When contributing to this repository, please first discuss the change you wish to make via issue with the maintainers of this repository before making a change. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request. Code of Conduct This project and everyone participating in it is governed by the Open Food Facts Code of Conduct , please follow it in all your interaction with the project. By participating, you are expected to uphold this code. Please report unacceptable behavior/abuse to abuse@openfoodfacts.org Pull Request Process Ensure any install or build dependencies are removed before the end of the layer when doing a build. Add only relevant files to commit and ignore the rest to keep the repo clean. Update the README.md with details of changes to the interface, this includes new environment variables, exposed ports, useful file locations and container parameters. You should request review from the maintainers once you submit the Pull Request. Instructions Git Workflow (all the commands are to run in your console) Step 1 ## Step 1: Fork Repository ## Step 2: Git Set Up & Download # Clone the repo git clone https://github.com/<User-Name>/facets-knowledge-panels.git # move to the folder cd facets-knowledge-panels # Add upstream remote git remote add upstream https://github.com/openfoodfacts/facets-knowledge-panels.git # Fetch and merge with upstream/master git fetch upstream git merge upstream/master ## Step 2: Create and Publish Working Branch git checkout -b <type>/<issue-issueNumber>/{<additional-fixes>} # Example: fix/issue-21 git push origin <type>/<issue-issueNumber>/{<additional-fixes>} ## Types: # wip - Work in Progress; long term work; mainstream changes; # feat - New Feature; future planned; non-mainstream changes; # bug - Bug Fixes # exp - Experimental; random experimental features; Step 2 Setup project locally Step 3 ## Committing and pushing your work # recompile languages files make build_lang # format your code make checks # Ensure branch git branch # Fetch and merge with upstream/master git fetch upstream git merge upstream/master # Add untracked files git add . # Commit all changes with appropriate commit message and description git commit -m \"your-commit-message\" # Fetch and merge with upstream/master again git fetch upstream git merge upstream/master # Push changes to your forked repository git push origin <type>/<issue-issueNumber>/{<additional-fixes>} ## Creating the PR using GitHub Website # Create Pull Request from <type>/<issue-issueNumber>/{<additional-fixes>} branch in your forked repository to the master branch in the upstream repository # After creating PR, add a Reviewer (Any Admin) and yourself as the assignee # Link Pull Request to appropriate Issue, or Project+Milestone (if no issue created) # IMPORTANT: Do Not Merge the PR unless specifically asked to by an admin. After PR Merge # Delete branch from forked repo git branch -d <type>/<issue-issueNumber>/{<additional-fixes>} git push --delete origin <type>/<issue-issueNumber>/{<additional-fixes>} # Fetch and merge with upstream/master git checkout master git pull upstream git push origin Always follow commit message standards About the fork-and-branch workflow","title":"Contributing to Facets Knowledge Panels"},{"location":"how-to-guides/CONTRIBUTING/#contributing-to-facets-knowledge-panels","text":"First off, thanks for taking the time to contribute! \ud83c\udf89\ud83c\udf89 When contributing to this repository, please first discuss the change you wish to make via issue with the maintainers of this repository before making a change. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.","title":"Contributing to Facets Knowledge Panels"},{"location":"how-to-guides/CONTRIBUTING/#code-of-conduct","text":"This project and everyone participating in it is governed by the Open Food Facts Code of Conduct , please follow it in all your interaction with the project. By participating, you are expected to uphold this code. Please report unacceptable behavior/abuse to abuse@openfoodfacts.org","title":"Code of Conduct"},{"location":"how-to-guides/CONTRIBUTING/#pull-request-process","text":"Ensure any install or build dependencies are removed before the end of the layer when doing a build. Add only relevant files to commit and ignore the rest to keep the repo clean. Update the README.md with details of changes to the interface, this includes new environment variables, exposed ports, useful file locations and container parameters. You should request review from the maintainers once you submit the Pull Request.","title":"Pull Request Process"},{"location":"how-to-guides/CONTRIBUTING/#instructions","text":"Git Workflow (all the commands are to run in your console)","title":"Instructions"},{"location":"how-to-guides/CONTRIBUTING/#step-1","text":"## Step 1: Fork Repository ## Step 2: Git Set Up & Download # Clone the repo git clone https://github.com/<User-Name>/facets-knowledge-panels.git # move to the folder cd facets-knowledge-panels # Add upstream remote git remote add upstream https://github.com/openfoodfacts/facets-knowledge-panels.git # Fetch and merge with upstream/master git fetch upstream git merge upstream/master ## Step 2: Create and Publish Working Branch git checkout -b <type>/<issue-issueNumber>/{<additional-fixes>} # Example: fix/issue-21 git push origin <type>/<issue-issueNumber>/{<additional-fixes>} ## Types: # wip - Work in Progress; long term work; mainstream changes; # feat - New Feature; future planned; non-mainstream changes; # bug - Bug Fixes # exp - Experimental; random experimental features;","title":"Step 1"},{"location":"how-to-guides/CONTRIBUTING/#step-2","text":"Setup project locally","title":"Step 2"},{"location":"how-to-guides/CONTRIBUTING/#step-3","text":"## Committing and pushing your work # recompile languages files make build_lang # format your code make checks # Ensure branch git branch # Fetch and merge with upstream/master git fetch upstream git merge upstream/master # Add untracked files git add . # Commit all changes with appropriate commit message and description git commit -m \"your-commit-message\" # Fetch and merge with upstream/master again git fetch upstream git merge upstream/master # Push changes to your forked repository git push origin <type>/<issue-issueNumber>/{<additional-fixes>} ## Creating the PR using GitHub Website # Create Pull Request from <type>/<issue-issueNumber>/{<additional-fixes>} branch in your forked repository to the master branch in the upstream repository # After creating PR, add a Reviewer (Any Admin) and yourself as the assignee # Link Pull Request to appropriate Issue, or Project+Milestone (if no issue created) # IMPORTANT: Do Not Merge the PR unless specifically asked to by an admin. After PR Merge # Delete branch from forked repo git branch -d <type>/<issue-issueNumber>/{<additional-fixes>} git push --delete origin <type>/<issue-issueNumber>/{<additional-fixes>} # Fetch and merge with upstream/master git checkout master git pull upstream git push origin Always follow commit message standards About the fork-and-branch workflow","title":"Step 3"},{"location":"how-to-guides/Project-setup-locally/","text":"Project Setup You may choose Docker-compose(recommended), or Through virtual env Through Docker Prerequisite - Docker After forking the repository to build: docker-compose build to run: docker-compose up Visit http://127.0.0.1/ with the endpoints or /docs for documentation Through virtual env Prerequisite - Python After forking the repository Create virtual env Install requirements.txt pip install -r requirements.txt uvicorn app.main:app --reload Checkout your local host http://127.0.0.1:8000/ with the endpoints or /docs for documentation","title":"Project Setup"},{"location":"how-to-guides/Project-setup-locally/#project-setup","text":"You may choose Docker-compose(recommended), or Through virtual env","title":"Project Setup"},{"location":"how-to-guides/Project-setup-locally/#through-docker","text":"Prerequisite - Docker After forking the repository to build: docker-compose build to run: docker-compose up Visit http://127.0.0.1/ with the endpoints or /docs for documentation","title":"Through Docker"},{"location":"how-to-guides/Project-setup-locally/#through-virtual-env","text":"Prerequisite - Python After forking the repository Create virtual env Install requirements.txt pip install -r requirements.txt uvicorn app.main:app --reload Checkout your local host http://127.0.0.1:8000/ with the endpoints or /docs for documentation","title":"Through virtual env"},{"location":"how-to-guides/Testing/","text":"Testing docker setup docker-compose run --rm facets-api pytest tests or make tests virtual env setup Checkout tests directory pytest","title":"Testing"},{"location":"how-to-guides/Testing/#testing","text":"","title":"Testing"},{"location":"how-to-guides/Testing/#docker-setup","text":"docker-compose run --rm facets-api pytest tests or make tests","title":"docker setup"},{"location":"how-to-guides/Testing/#virtual-env-setup","text":"Checkout tests directory pytest","title":"virtual env setup"},{"location":"references/API%20references/","text":"API Reference Knowledge panel facets is a simple api that allow user to get knowledge-panels based on the different facets The api must be prefixed with this /knowledge_panel? . The full url look like http://127.0.0.1:8000/knowledge_panel?facet_tag={desired-facet}&value_tag={facet-value}&lang_code={language}&country={desired-country} API Documentation with interactive \"try-out\": http://127.0.0.1:8000/docs","title":"API Reference"},{"location":"references/API%20references/#api-reference","text":"Knowledge panel facets is a simple api that allow user to get knowledge-panels based on the different facets The api must be prefixed with this /knowledge_panel? . The full url look like http://127.0.0.1:8000/knowledge_panel?facet_tag={desired-facet}&value_tag={facet-value}&lang_code={language}&country={desired-country} API Documentation with interactive \"try-out\": http://127.0.0.1:8000/docs","title":"API Reference"}]}